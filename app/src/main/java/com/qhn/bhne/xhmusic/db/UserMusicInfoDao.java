package com.qhn.bhne.xhmusic.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qhn.bhne.xhmusic.mvp.entity.db.UserMusicInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MUSIC_INFO".
*/
public class UserMusicInfoDao extends AbstractDao<UserMusicInfo, Long> {

    public static final String TABLENAME = "USER_MUSIC_INFO";

    /**
     * Properties of entity UserMusicInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalMusicCount = new Property(1, int.class, "localMusicCount", false, "LOCAL_MUSIC_COUNT");
        public final static Property RecentPlayCount = new Property(2, int.class, "recentPlayCount", false, "RECENT_PLAY_COUNT");
        public final static Property LoadDownCount = new Property(3, int.class, "loadDownCount", false, "LOAD_DOWN_COUNT");
        public final static Property LoveSingerCount = new Property(4, int.class, "loveSingerCount", false, "LOVE_SINGER_COUNT");
        public final static Property LoveMVCount = new Property(5, int.class, "loveMVCount", false, "LOVE_MVCOUNT");
        public final static Property BuildSongMenuCount = new Property(6, int.class, "buildSongMenuCount", false, "BUILD_SONG_MENU_COUNT");
        public final static Property CollectSongMenuCount = new Property(7, int.class, "collectSongMenuCount", false, "COLLECT_SONG_MENU_COUNT");
        public final static Property IsScanLocalMusic = new Property(8, boolean.class, "isScanLocalMusic", false, "IS_SCAN_LOCAL_MUSIC");
    }


    public UserMusicInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserMusicInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MUSIC_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOCAL_MUSIC_COUNT\" INTEGER NOT NULL ," + // 1: localMusicCount
                "\"RECENT_PLAY_COUNT\" INTEGER NOT NULL ," + // 2: recentPlayCount
                "\"LOAD_DOWN_COUNT\" INTEGER NOT NULL ," + // 3: loadDownCount
                "\"LOVE_SINGER_COUNT\" INTEGER NOT NULL ," + // 4: loveSingerCount
                "\"LOVE_MVCOUNT\" INTEGER NOT NULL ," + // 5: loveMVCount
                "\"BUILD_SONG_MENU_COUNT\" INTEGER NOT NULL ," + // 6: buildSongMenuCount
                "\"COLLECT_SONG_MENU_COUNT\" INTEGER NOT NULL ," + // 7: collectSongMenuCount
                "\"IS_SCAN_LOCAL_MUSIC\" INTEGER NOT NULL );"); // 8: isScanLocalMusic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MUSIC_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMusicInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalMusicCount());
        stmt.bindLong(3, entity.getRecentPlayCount());
        stmt.bindLong(4, entity.getLoadDownCount());
        stmt.bindLong(5, entity.getLoveSingerCount());
        stmt.bindLong(6, entity.getLoveMVCount());
        stmt.bindLong(7, entity.getBuildSongMenuCount());
        stmt.bindLong(8, entity.getCollectSongMenuCount());
        stmt.bindLong(9, entity.getIsScanLocalMusic() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMusicInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalMusicCount());
        stmt.bindLong(3, entity.getRecentPlayCount());
        stmt.bindLong(4, entity.getLoadDownCount());
        stmt.bindLong(5, entity.getLoveSingerCount());
        stmt.bindLong(6, entity.getLoveMVCount());
        stmt.bindLong(7, entity.getBuildSongMenuCount());
        stmt.bindLong(8, entity.getCollectSongMenuCount());
        stmt.bindLong(9, entity.getIsScanLocalMusic() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserMusicInfo readEntity(Cursor cursor, int offset) {
        UserMusicInfo entity = new UserMusicInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // localMusicCount
            cursor.getInt(offset + 2), // recentPlayCount
            cursor.getInt(offset + 3), // loadDownCount
            cursor.getInt(offset + 4), // loveSingerCount
            cursor.getInt(offset + 5), // loveMVCount
            cursor.getInt(offset + 6), // buildSongMenuCount
            cursor.getInt(offset + 7), // collectSongMenuCount
            cursor.getShort(offset + 8) != 0 // isScanLocalMusic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMusicInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalMusicCount(cursor.getInt(offset + 1));
        entity.setRecentPlayCount(cursor.getInt(offset + 2));
        entity.setLoadDownCount(cursor.getInt(offset + 3));
        entity.setLoveSingerCount(cursor.getInt(offset + 4));
        entity.setLoveMVCount(cursor.getInt(offset + 5));
        entity.setBuildSongMenuCount(cursor.getInt(offset + 6));
        entity.setCollectSongMenuCount(cursor.getInt(offset + 7));
        entity.setIsScanLocalMusic(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserMusicInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserMusicInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserMusicInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

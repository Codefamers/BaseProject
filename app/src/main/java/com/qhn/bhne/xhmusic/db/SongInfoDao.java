package com.qhn.bhne.xhmusic.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qhn.bhne.xhmusic.mvp.entity.db.SongInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_INFO".
*/
public class SongInfoDao extends AbstractDao<SongInfo, Void> {

    public static final String TABLENAME = "SONG_INFO";

    /**
     * Properties of entity SongInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BitRate = new Property(0, float.class, "bitRate", false, "BIT_RATE");
        public final static Property ChoricSinger = new Property(1, String.class, "choricSinger", false, "CHORIC_SINGER");
        public final static Property Ctype = new Property(2, int.class, "ctype", false, "CTYPE");
        public final static Property Errcode = new Property(3, int.class, "errcode", false, "ERRCODE");
        public final static Property Error = new Property(4, String.class, "error", false, "ERROR");
        public final static Property ExtName = new Property(5, String.class, "extName", false, "EXT_NAME");
        public final static Property FileHead = new Property(6, int.class, "fileHead", false, "FILE_HEAD");
        public final static Property FileName = new Property(7, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(8, int.class, "fileSize", false, "FILE_SIZE");
        public final static Property Hash = new Property(9, String.class, "hash", false, "HASH");
        public final static Property ImgUrl = new Property(10, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Intro = new Property(11, String.class, "intro", false, "INTRO");
        public final static Property Mvhash = new Property(12, String.class, "mvhash", false, "MVHASH");
        public final static Property Privilege = new Property(13, int.class, "privilege", false, "PRIVILEGE");
        public final static Property Q = new Property(14, int.class, "q", false, "Q");
        public final static Property Req_hash = new Property(15, String.class, "req_hash", false, "REQ_HASH");
        public final static Property SingerHead = new Property(16, String.class, "singerHead", false, "SINGER_HEAD");
        public final static Property SingerId = new Property(17, int.class, "singerId", false, "SINGER_ID");
        public final static Property SingerName = new Property(18, String.class, "singerName", false, "SINGER_NAME");
        public final static Property SongName = new Property(19, String.class, "songName", false, "SONG_NAME");
        public final static Property Status = new Property(20, int.class, "status", false, "STATUS");
        public final static Property Stype = new Property(21, int.class, "stype", false, "STYPE");
        public final static Property TimeLength = new Property(22, int.class, "timeLength", false, "TIME_LENGTH");
        public final static Property Topic_remark = new Property(23, String.class, "topic_remark", false, "TOPIC_REMARK");
        public final static Property Topic_url = new Property(24, String.class, "topic_url", false, "TOPIC_URL");
        public final static Property Url = new Property(25, String.class, "url", false, "URL");
        public final static Property SongID = new Property(26, int.class, "songID", false, "SONG_ID");
        public final static Property Folder = new Property(27, String.class, "folder", false, "FOLDER");
        public final static Property FolderPath = new Property(28, String.class, "folderPath", false, "FOLDER_PATH");
        public final static Property IsLocal = new Property(29, Boolean.class, "isLocal", false, "IS_LOCAL");
    }


    public SongInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SongInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_INFO\" (" + //
                "\"BIT_RATE\" REAL NOT NULL ," + // 0: bitRate
                "\"CHORIC_SINGER\" TEXT," + // 1: choricSinger
                "\"CTYPE\" INTEGER NOT NULL ," + // 2: ctype
                "\"ERRCODE\" INTEGER NOT NULL ," + // 3: errcode
                "\"ERROR\" TEXT," + // 4: error
                "\"EXT_NAME\" TEXT," + // 5: extName
                "\"FILE_HEAD\" INTEGER NOT NULL ," + // 6: fileHead
                "\"FILE_NAME\" TEXT," + // 7: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 8: fileSize
                "\"HASH\" TEXT," + // 9: hash
                "\"IMG_URL\" TEXT NOT NULL ," + // 10: imgUrl
                "\"INTRO\" TEXT NOT NULL ," + // 11: intro
                "\"MVHASH\" TEXT," + // 12: mvhash
                "\"PRIVILEGE\" INTEGER NOT NULL ," + // 13: privilege
                "\"Q\" INTEGER NOT NULL ," + // 14: q
                "\"REQ_HASH\" TEXT," + // 15: req_hash
                "\"SINGER_HEAD\" TEXT," + // 16: singerHead
                "\"SINGER_ID\" INTEGER NOT NULL ," + // 17: singerId
                "\"SINGER_NAME\" TEXT," + // 18: singerName
                "\"SONG_NAME\" TEXT," + // 19: songName
                "\"STATUS\" INTEGER NOT NULL ," + // 20: status
                "\"STYPE\" INTEGER NOT NULL ," + // 21: stype
                "\"TIME_LENGTH\" INTEGER NOT NULL ," + // 22: timeLength
                "\"TOPIC_REMARK\" TEXT," + // 23: topic_remark
                "\"TOPIC_URL\" TEXT," + // 24: topic_url
                "\"URL\" TEXT," + // 25: url
                "\"SONG_ID\" INTEGER NOT NULL ," + // 26: songID
                "\"FOLDER\" TEXT," + // 27: folder
                "\"FOLDER_PATH\" TEXT," + // 28: folderPath
                "\"IS_LOCAL\" INTEGER NOT NULL );"); // 29: isLocal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongInfo entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getBitRate());
 
        String choricSinger = entity.getChoricSinger();
        if (choricSinger != null) {
            stmt.bindString(2, choricSinger);
        }
        stmt.bindLong(3, entity.getCtype());
        stmt.bindLong(4, entity.getErrcode());
 
        String error = entity.getError();
        if (error != null) {
            stmt.bindString(5, error);
        }
 
        String extName = entity.getExtName();
        if (extName != null) {
            stmt.bindString(6, extName);
        }
        stmt.bindLong(7, entity.getFileHead());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getFileSize());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(10, hash);
        }
        stmt.bindString(11, entity.getImgUrl());
        stmt.bindString(12, entity.getIntro());
 
        String mvhash = entity.getMvhash();
        if (mvhash != null) {
            stmt.bindString(13, mvhash);
        }
        stmt.bindLong(14, entity.getPrivilege());
        stmt.bindLong(15, entity.getQ());
 
        String req_hash = entity.getReq_hash();
        if (req_hash != null) {
            stmt.bindString(16, req_hash);
        }
 
        String singerHead = entity.getSingerHead();
        if (singerHead != null) {
            stmt.bindString(17, singerHead);
        }
        stmt.bindLong(18, entity.getSingerId());
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(19, singerName);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(20, songName);
        }
        stmt.bindLong(21, entity.getStatus());
        stmt.bindLong(22, entity.getStype());
        stmt.bindLong(23, entity.getTimeLength());
 
        String topic_remark = entity.getTopic_remark();
        if (topic_remark != null) {
            stmt.bindString(24, topic_remark);
        }
 
        String topic_url = entity.getTopic_url();
        if (topic_url != null) {
            stmt.bindString(25, topic_url);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(26, url);
        }
        stmt.bindLong(27, entity.getSongID());
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(28, folder);
        }
 
        String folderPath = entity.getFolderPath();
        if (folderPath != null) {
            stmt.bindString(29, folderPath);
        }
        stmt.bindLong(30, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongInfo entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getBitRate());
 
        String choricSinger = entity.getChoricSinger();
        if (choricSinger != null) {
            stmt.bindString(2, choricSinger);
        }
        stmt.bindLong(3, entity.getCtype());
        stmt.bindLong(4, entity.getErrcode());
 
        String error = entity.getError();
        if (error != null) {
            stmt.bindString(5, error);
        }
 
        String extName = entity.getExtName();
        if (extName != null) {
            stmt.bindString(6, extName);
        }
        stmt.bindLong(7, entity.getFileHead());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getFileSize());
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(10, hash);
        }
        stmt.bindString(11, entity.getImgUrl());
        stmt.bindString(12, entity.getIntro());
 
        String mvhash = entity.getMvhash();
        if (mvhash != null) {
            stmt.bindString(13, mvhash);
        }
        stmt.bindLong(14, entity.getPrivilege());
        stmt.bindLong(15, entity.getQ());
 
        String req_hash = entity.getReq_hash();
        if (req_hash != null) {
            stmt.bindString(16, req_hash);
        }
 
        String singerHead = entity.getSingerHead();
        if (singerHead != null) {
            stmt.bindString(17, singerHead);
        }
        stmt.bindLong(18, entity.getSingerId());
 
        String singerName = entity.getSingerName();
        if (singerName != null) {
            stmt.bindString(19, singerName);
        }
 
        String songName = entity.getSongName();
        if (songName != null) {
            stmt.bindString(20, songName);
        }
        stmt.bindLong(21, entity.getStatus());
        stmt.bindLong(22, entity.getStype());
        stmt.bindLong(23, entity.getTimeLength());
 
        String topic_remark = entity.getTopic_remark();
        if (topic_remark != null) {
            stmt.bindString(24, topic_remark);
        }
 
        String topic_url = entity.getTopic_url();
        if (topic_url != null) {
            stmt.bindString(25, topic_url);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(26, url);
        }
        stmt.bindLong(27, entity.getSongID());
 
        String folder = entity.getFolder();
        if (folder != null) {
            stmt.bindString(28, folder);
        }
 
        String folderPath = entity.getFolderPath();
        if (folderPath != null) {
            stmt.bindString(29, folderPath);
        }
        stmt.bindLong(30, entity.getIsLocal() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SongInfo readEntity(Cursor cursor, int offset) {
        SongInfo entity = new SongInfo( //
            cursor.getFloat(offset + 0), // bitRate
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // choricSinger
            cursor.getInt(offset + 2), // ctype
            cursor.getInt(offset + 3), // errcode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // error
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extName
            cursor.getInt(offset + 6), // fileHead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileName
            cursor.getInt(offset + 8), // fileSize
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hash
            cursor.getString(offset + 10), // imgUrl
            cursor.getString(offset + 11), // intro
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mvhash
            cursor.getInt(offset + 13), // privilege
            cursor.getInt(offset + 14), // q
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // req_hash
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // singerHead
            cursor.getInt(offset + 17), // singerId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // singerName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // songName
            cursor.getInt(offset + 20), // status
            cursor.getInt(offset + 21), // stype
            cursor.getInt(offset + 22), // timeLength
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // topic_remark
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // topic_url
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // url
            cursor.getInt(offset + 26), // songID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // folder
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // folderPath
            cursor.getShort(offset + 29) != 0 // isLocal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongInfo entity, int offset) {
        entity.setBitRate(cursor.getFloat(offset + 0));
        entity.setChoricSinger(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCtype(cursor.getInt(offset + 2));
        entity.setErrcode(cursor.getInt(offset + 3));
        entity.setError(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFileHead(cursor.getInt(offset + 6));
        entity.setFileName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileSize(cursor.getInt(offset + 8));
        entity.setHash(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgUrl(cursor.getString(offset + 10));
        entity.setIntro(cursor.getString(offset + 11));
        entity.setMvhash(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrivilege(cursor.getInt(offset + 13));
        entity.setQ(cursor.getInt(offset + 14));
        entity.setReq_hash(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSingerHead(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSingerId(cursor.getInt(offset + 17));
        entity.setSingerName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSongName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStatus(cursor.getInt(offset + 20));
        entity.setStype(cursor.getInt(offset + 21));
        entity.setTimeLength(cursor.getInt(offset + 22));
        entity.setTopic_remark(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTopic_url(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUrl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSongID(cursor.getInt(offset + 26));
        entity.setFolder(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setFolderPath(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsLocal(cursor.getShort(offset + 29) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SongInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SongInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(SongInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

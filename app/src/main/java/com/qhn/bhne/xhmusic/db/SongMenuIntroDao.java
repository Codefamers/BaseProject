package com.qhn.bhne.xhmusic.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qhn.bhne.xhmusic.mvp.entity.db.SongMenuIntro;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_MENU_INTRO".
*/
public class SongMenuIntroDao extends AbstractDao<SongMenuIntro, Void> {

    public static final String TABLENAME = "SONG_MENU_INTRO";

    /**
     * Properties of entity SongMenuIntro.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Play_count = new Property(0, int.class, "play_count", false, "PLAY_COUNT");
        public final static Property Specialname = new Property(1, String.class, "specialname", false, "SPECIALNAME");
        public final static Property Publishtime = new Property(2, String.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Singername = new Property(3, String.class, "singername", false, "SINGERNAME");
        public final static Property Verified = new Property(4, int.class, "verified", false, "VERIFIED");
        public final static Property Songcount = new Property(5, int.class, "songcount", false, "SONGCOUNT");
        public final static Property Imgurl = new Property(6, String.class, "imgurl", false, "IMGURL");
        public final static Property Intro = new Property(7, String.class, "intro", false, "INTRO");
        public final static Property Suid = new Property(8, int.class, "suid", false, "SUID");
        public final static Property Specialid = new Property(9, int.class, "specialid", false, "SPECIALID");
        public final static Property Collectcount = new Property(10, int.class, "collectcount", false, "COLLECTCOUNT");
        public final static Property User_name = new Property(11, String.class, "user_name", false, "USER_NAME");
        public final static Property Slid = new Property(12, int.class, "slid", false, "SLID");
    }


    public SongMenuIntroDao(DaoConfig config) {
        super(config);
    }
    
    public SongMenuIntroDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_MENU_INTRO\" (" + //
                "\"PLAY_COUNT\" INTEGER NOT NULL ," + // 0: play_count
                "\"SPECIALNAME\" TEXT NOT NULL ," + // 1: specialname
                "\"PUBLISHTIME\" TEXT NOT NULL ," + // 2: publishtime
                "\"SINGERNAME\" TEXT," + // 3: singername
                "\"VERIFIED\" INTEGER NOT NULL ," + // 4: verified
                "\"SONGCOUNT\" INTEGER NOT NULL ," + // 5: songcount
                "\"IMGURL\" TEXT NOT NULL ," + // 6: imgurl
                "\"INTRO\" TEXT NOT NULL ," + // 7: intro
                "\"SUID\" INTEGER NOT NULL ," + // 8: suid
                "\"SPECIALID\" INTEGER NOT NULL ," + // 9: specialid
                "\"COLLECTCOUNT\" INTEGER NOT NULL ," + // 10: collectcount
                "\"USER_NAME\" TEXT," + // 11: user_name
                "\"SLID\" INTEGER NOT NULL );"); // 12: slid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_MENU_INTRO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongMenuIntro entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPlay_count());
        stmt.bindString(2, entity.getSpecialname());
        stmt.bindString(3, entity.getPublishtime());
 
        String singername = entity.getSingername();
        if (singername != null) {
            stmt.bindString(4, singername);
        }
        stmt.bindLong(5, entity.getVerified());
        stmt.bindLong(6, entity.getSongcount());
        stmt.bindString(7, entity.getImgurl());
        stmt.bindString(8, entity.getIntro());
        stmt.bindLong(9, entity.getSuid());
        stmt.bindLong(10, entity.getSpecialid());
        stmt.bindLong(11, entity.getCollectcount());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(12, user_name);
        }
        stmt.bindLong(13, entity.getSlid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongMenuIntro entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPlay_count());
        stmt.bindString(2, entity.getSpecialname());
        stmt.bindString(3, entity.getPublishtime());
 
        String singername = entity.getSingername();
        if (singername != null) {
            stmt.bindString(4, singername);
        }
        stmt.bindLong(5, entity.getVerified());
        stmt.bindLong(6, entity.getSongcount());
        stmt.bindString(7, entity.getImgurl());
        stmt.bindString(8, entity.getIntro());
        stmt.bindLong(9, entity.getSuid());
        stmt.bindLong(10, entity.getSpecialid());
        stmt.bindLong(11, entity.getCollectcount());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(12, user_name);
        }
        stmt.bindLong(13, entity.getSlid());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SongMenuIntro readEntity(Cursor cursor, int offset) {
        SongMenuIntro entity = new SongMenuIntro( //
            cursor.getInt(offset + 0), // play_count
            cursor.getString(offset + 1), // specialname
            cursor.getString(offset + 2), // publishtime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // singername
            cursor.getInt(offset + 4), // verified
            cursor.getInt(offset + 5), // songcount
            cursor.getString(offset + 6), // imgurl
            cursor.getString(offset + 7), // intro
            cursor.getInt(offset + 8), // suid
            cursor.getInt(offset + 9), // specialid
            cursor.getInt(offset + 10), // collectcount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_name
            cursor.getInt(offset + 12) // slid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongMenuIntro entity, int offset) {
        entity.setPlay_count(cursor.getInt(offset + 0));
        entity.setSpecialname(cursor.getString(offset + 1));
        entity.setPublishtime(cursor.getString(offset + 2));
        entity.setSingername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVerified(cursor.getInt(offset + 4));
        entity.setSongcount(cursor.getInt(offset + 5));
        entity.setImgurl(cursor.getString(offset + 6));
        entity.setIntro(cursor.getString(offset + 7));
        entity.setSuid(cursor.getInt(offset + 8));
        entity.setSpecialid(cursor.getInt(offset + 9));
        entity.setCollectcount(cursor.getInt(offset + 10));
        entity.setUser_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSlid(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SongMenuIntro entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SongMenuIntro entity) {
        return null;
    }

    @Override
    public boolean hasKey(SongMenuIntro entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

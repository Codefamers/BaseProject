package com.qhn.bhne.xhmusic.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qhn.bhne.xhmusic.mvp.entity.db.FolderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLDER_INFO".
*/
public class FolderInfoDao extends AbstractDao<FolderInfo, Void> {

    public static final String TABLENAME = "FOLDER_INFO";

    /**
     * Properties of entity FolderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Folder_name = new Property(0, String.class, "folder_name", false, "FOLDER_NAME");
        public final static Property Folder_path = new Property(1, String.class, "folder_path", false, "FOLDER_PATH");
        public final static Property Folder_sort = new Property(2, String.class, "folder_sort", false, "FOLDER_SORT");
        public final static Property Folder_count = new Property(3, int.class, "folder_count", false, "FOLDER_COUNT");
    }


    public FolderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FolderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLDER_INFO\" (" + //
                "\"FOLDER_NAME\" TEXT NOT NULL ," + // 0: folder_name
                "\"FOLDER_PATH\" TEXT NOT NULL ," + // 1: folder_path
                "\"FOLDER_SORT\" TEXT," + // 2: folder_sort
                "\"FOLDER_COUNT\" INTEGER NOT NULL );"); // 3: folder_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLDER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FolderInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFolder_name());
        stmt.bindString(2, entity.getFolder_path());
 
        String folder_sort = entity.getFolder_sort();
        if (folder_sort != null) {
            stmt.bindString(3, folder_sort);
        }
        stmt.bindLong(4, entity.getFolder_count());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FolderInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFolder_name());
        stmt.bindString(2, entity.getFolder_path());
 
        String folder_sort = entity.getFolder_sort();
        if (folder_sort != null) {
            stmt.bindString(3, folder_sort);
        }
        stmt.bindLong(4, entity.getFolder_count());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FolderInfo readEntity(Cursor cursor, int offset) {
        FolderInfo entity = new FolderInfo( //
            cursor.getString(offset + 0), // folder_name
            cursor.getString(offset + 1), // folder_path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // folder_sort
            cursor.getInt(offset + 3) // folder_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FolderInfo entity, int offset) {
        entity.setFolder_name(cursor.getString(offset + 0));
        entity.setFolder_path(cursor.getString(offset + 1));
        entity.setFolder_sort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFolder_count(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FolderInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FolderInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(FolderInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
